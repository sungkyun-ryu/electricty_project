package kdt.pnu.persistence;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import kdt.pnu.domain.Electricity;

public interface ElectricityRepository extends JpaRepository<Electricity,Integer>{

	@Query(value = "with daily_windchill as ( "
			+ " select  "
			+ "  daily.date as date, month(daily.date) as month, year(daily.date) as year,  "
			+ "  daily.city as city, daily.county as county, "
			+ "  daily.max_tmpr as max_tmpr, daily.min_tmpr as min_tmpr, daily.avg_tmpr as avg_tmpr, "
			+ "  daily.max_rh as max_rh, daily.min_rh as min_rh, daily.avg_rh as avg_rh, "
			+ "  daily.max_ws as max_ws, daily.min_ws as min_ws, daily.avg_ws as avg_ws, "
			+ "   case  "
			+ "    when month(date) in (5,6,7,8,9) then -0.2442 + 0.55399 * daily.Tw + 0.45535 * daily.max_tmpr - 0.0022 * pow(daily.Tw, 2) + 0.00278 * daily.Tw * daily.max_tmpr + 3.0 "
			+ "   else 13.12 + 0.6215*daily.min_tmpr - 11.37 * pow(daily.avg_ws ,0.16) + 0.3965 * pow(daily.avg_ws,0.16) * daily.min_tmpr  "
			+ "  end as wind_chill,  "
			+ "  case        "
			+ "		when month(daily.date) in (6,7,8) then format(1.8*daily.max_tmpr - .55*(1-daily.max_rh/100) * (1.8*daily.max_tmpr -26) + 32 , 1 ) "
			+ "		else null "
			+ "	end as di   "
			+ " from  "
			+ " ( "
			+ " select  "
			+ "  w.date as date, max(w.tmpr) as max_tmpr, min(w.tmpr) as min_tmpr, avg(w.tmpr) as avg_tmpr, "
			+ "  max(w.rhwt) as max_rh, min(w.rhwt) as min_rh, avg(w.rhwt) as avg_rh,  "
			+ "  max(w.ws) as max_ws, min(w.ws) as min_ws, avg(w.ws) as avg_ws, "
			+ "  max(w.tmpr)*atan(0.151977*pow(max(w.rhwt)+8.313659,0.5)) + atan(max(w.tmpr) + max(w.rhwt)) - atan(max(w.rhwt)-1.67633) + 0.00391838* max(w.rhwt) *3/2*atan(0.023101*max(w.rhwt)) - 4.686035 as Tw, "
			+ "     w.city as city,  "
			+ "     w.county as county	 "
			+ " from weather w  "
			+ "  where w.rhwt <> -1 and w.ws <> -1 and w.tmpr <> -50  "
			+ "  group by w.date, w.city, w.county "
			+ " ) "
			+ " as daily "
			+ "  where daily.city=:city and daily.county=:county "
			+ " and date between date_format(date_sub(:date, interval 1 month), '%Y-%m-01') and last_day(:date) "
			+ " ),  "
			+ "stats as (  "
			+ "  select  "
			+ "   d.month as month, "
			+ "    d.year as year,  "
			+ "	d.city  as city,  "
			+ "    d.county as county, "
			+ "   min(d.wind_chill) as min_windchill, "
			+ "         max(d.wind_chill) as max_windchill "
			+ "  from daily_windchill d "
			+ "   "
			+ "     group by year, month, city, county "
			+ " ),  "
			+ "daily_elec as ( "
			+ " select  "
			+ "	d.date as date, "
			+ "     d.city as city,  "
			+ "     d.county as county, "
			+ "     d.wind_chill, "
			+ "     s.max_windchill,  "
			+ "     s.min_windchill,     "
			+ "  case "
			+ "  when month(d.date) in (5,6,7,8,9) then exp(0.3+((d.wind_chill - s.min_windchill)/(s.max_windchill-s.min_windchill))*0.6)  "
			+ "     else exp(-(0.3+((d.wind_chill - s.min_windchill)/(s.max_windchill-s.min_windchill))*0.6)) "
			+ " end as elec_nonlinear "
			+ " from daily_windchill as d "
			+ " join stats s "
			+ " on d.month = s.month and d.year = s.year and d.city = s.city and d.county = s.county "
			+ " "
			+ " ), "
			+ " monthly_stats as ( "
			+ " select  "
			+ "     month(d.date) as month, "
			+ "     year(d.date) as year, "
			+ "     d.county as county, "
			+ "     d.city as city, "
			+ "     sum(elec_nonlinear) as sum_elec_nonlinear "
			+ "     from daily_elec d "
			+ "     group by year, month, county, city "
			+ " ), "
			+ " house_elec as ( "
			+ "	select  "
			+ "    e.city as city, e.county as county, e.elec_avg as elec_avg, e.date as date     "
			+ "    from electricity e "
			+ " ) "
			+ " select  "
			+ "     dw.date, dw.city, dw.county, "
			+ "     format(dw.max_tmpr,1) as max_temp, format(dw.min_tmpr,1) as min_temp, format(dw.avg_tmpr,1) as avg_temp, "
			+ "     format(dw.max_rh,1) as max_rh, format(dw.min_rh,1) as min_rh, format(dw.avg_rh,1) as avg_rh, "
			+ "     format(dw.di,1) as di, "

			+ " format(d.elec_nonlinear / m.sum_elec_nonlinear *  he.elec_avg,1)  as elec_avg "

			+ " from daily_windchill dw "
			+ "join monthly_stats m  "
			+ "on month(dw.date) = m.month and year(dw.date)= m.year and dw.county =m.county and dw.city = m.city "
			+ "join daily_elec d  "
			+ "on dw.date = d.date and dw.county = d.county "
			+ "join house_elec he "
			+ "on month(he.date) = m.month and year(he.date) = m.year and m.county = he.county and m.city = he.city "
			+ "and dw.date between date_sub(:date, interval 1 month) and :date "
			+ " "
			+ "order by dw.date; ",
			nativeQuery = true)
	List<Object[]> findByDateCityCounty(@Param("date") String date,
										@Param("city") String city,
										@Param("county") String county);
}
